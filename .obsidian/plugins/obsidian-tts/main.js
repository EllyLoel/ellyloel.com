/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
https://github.com/joethei/obsidian-rss
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/@cospired/i18n-iso-languages/codes.json
var require_codes = __commonJS({
  "node_modules/@cospired/i18n-iso-languages/codes.json"(exports, module2) {
    module2.exports = [
      ["aa", "aar", "aar", "ISO 639-1:aa"],
      ["ab", "abk", "abk", "ISO 639-1:ab"],
      ["ae", "ave", "ave", "ISO 639-1:ae"],
      ["af", "afr", "afr", "ISO 639-1:af"],
      ["ak", "aka", "aka", "ISO 639-1:ak"],
      ["am", "amh", "amh", "ISO 639-1:am"],
      ["an", "arg", "arg", "ISO 639-1:an"],
      ["ar", "ara", "ara", "ISO 639-1:ar"],
      ["as", "asm", "asm", "ISO 639-1:as"],
      ["av", "ava", "ava", "ISO 639-1:av"],
      ["ay", "aym", "aym", "ISO 639-1:ay"],
      ["az", "aze", "aze", "ISO 639-1:az"],
      ["ba", "bak", "bak", "ISO 639-1:ba"],
      ["be", "bel", "bel", "ISO 639-1:be"],
      ["bg", "bul", "bul", "ISO 639-1:bg"],
      ["bh", "bih", "bih", "ISO 639-1:bh"],
      ["bi", "bis", "bis", "ISO 639-1:bi"],
      ["bm", "bam", "bam", "ISO 639-1:bm"],
      ["bn", "ben", "ben", "ISO 639-1:bn"],
      ["bo", "bod", "tib", "ISO 639-1:bo"],
      ["br", "bre", "bre", "ISO 639-1:br"],
      ["bs", "bos", "bos", "ISO 639-1:bs"],
      ["ca", "cat", "cat", "ISO 639-1:ca"],
      ["ce", "che", "che", "ISO 639-1:ce"],
      ["ch", "cha", "cha", "ISO 639-1:ch"],
      ["co", "cos", "cos", "ISO 639-1:co"],
      ["cr", "cre", "cre", "ISO 639-1:cr"],
      ["cs", "ces", "cze", "ISO 639-1:cs"],
      ["cu", "chu", "chu", "ISO 639-1:cu"],
      ["cv", "chv", "chv", "ISO 639-1:cv"],
      ["cy", "cym", "wel", "ISO 639-1:cy"],
      ["da", "dan", "dan", "ISO 639-1:da"],
      ["de", "deu", "ger", "ISO 639-1:de"],
      ["dv", "div", "div", "ISO 639-1:dv"],
      ["dz", "dzo", "dzo", "ISO 639-1:dz"],
      ["ee", "ewe", "ewe", "ISO 639-1:ee"],
      ["el", "ell", "gre", "ISO 639-1:el"],
      ["en", "eng", "eng", "ISO 639-1:en"],
      ["eo", "epo", "epo", "ISO 639-1:eo"],
      ["es", "spa", "spa", "ISO 639-1:es"],
      ["et", "est", "est", "ISO 639-1:et"],
      ["eu", "eus", "baq", "ISO 639-1:eu"],
      ["fa", "fas", "per", "ISO 639-1:fa"],
      ["ff", "ful", "ful", "ISO 639-1:ff"],
      ["fi", "fin", "fin", "ISO 639-1:fi"],
      ["fj", "fij", "fij", "ISO 639-1:fj"],
      ["fo", "fao", "fao", "ISO 639-1:fo"],
      ["fr", "fra", "fre", "ISO 639-1:fr"],
      ["fy", "fry", "fry", "ISO 639-1:fy"],
      ["ga", "gle", "gle", "ISO 639-1:ga"],
      ["gd", "gla", "gla", "ISO 639-1:gd"],
      ["gl", "glg", "glg", "ISO 639-1:gl"],
      ["gn", "grn", "grn", "ISO 639-1:gn"],
      ["gu", "guj", "guj", "ISO 639-1:gu"],
      ["gv", "glv", "glv", "ISO 639-1:gv"],
      ["ha", "hau", "hau", "ISO 639-1:ha"],
      ["he", "heb", "heb", "ISO 639-1:he"],
      ["hi", "hin", "hin", "ISO 639-1:hi"],
      ["ho", "hmo", "hmo", "ISO 639-1:ho"],
      ["hr", "hrv", "hrv", "ISO 639-1:hr"],
      ["ht", "hat", "hat", "ISO 639-1:ht"],
      ["hu", "hun", "hun", "ISO 639-1:hu"],
      ["hy", "hye", "arm", "ISO 639-1:hy"],
      ["hz", "her", "her", "ISO 639-1:hz"],
      ["ia", "ina", "ina", "ISO 639-1:ia"],
      ["id", "ind", "ind", "ISO 639-1:id"],
      ["ie", "ile", "ile", "ISO 639-1:ie"],
      ["ig", "ibo", "ibo", "ISO 639-1:ig"],
      ["ii", "iii", "iii", "ISO 639-1:ii"],
      ["ik", "ipk", "ipk", "ISO 639-1:ik"],
      ["io", "ido", "ido", "ISO 639-1:io"],
      ["is", "isl", "ice", "ISO 639-1:is"],
      ["it", "ita", "ita", "ISO 639-1:it"],
      ["iu", "iku", "iku", "ISO 639-1:iu"],
      ["ja", "jpn", "jpn", "ISO 639-1:ja"],
      ["jv", "jav", "jav", "ISO 639-1:jv"],
      ["ka", "kat", "geo", "ISO 639-1:ka"],
      ["kg", "kon", "kon", "ISO 639-1:kg"],
      ["ki", "kik", "kik", "ISO 639-1:ki"],
      ["kj", "kua", "kua", "ISO 639-1:kj"],
      ["kk", "kaz", "kaz", "ISO 639-1:kk"],
      ["kl", "kal", "kal", "ISO 639-1:kl"],
      ["km", "khm", "khm", "ISO 639-1:km"],
      ["kn", "kan", "kan", "ISO 639-1:kn"],
      ["ko", "kor", "kor", "ISO 639-1:ko"],
      ["kr", "kau", "kau", "ISO 639-1:kr"],
      ["ks", "kas", "kas", "ISO 639-1:ks"],
      ["ku", "kur", "kur", "ISO 639-1:ku"],
      ["kv", "kom", "kom", "ISO 639-1:kv"],
      ["kw", "cor", "cor", "ISO 639-1:kw"],
      ["ky", "kir", "kir", "ISO 639-1:ky"],
      ["la", "lat", "lat", "ISO 639-1:la"],
      ["lb", "ltz", "ltz", "ISO 639-1:lb"],
      ["lg", "lug", "lug", "ISO 639-1:lg"],
      ["li", "lim", "lim", "ISO 639-1:li"],
      ["ln", "lin", "lin", "ISO 639-1:ln"],
      ["lo", "lao", "lao", "ISO 639-1:lo"],
      ["lt", "lit", "lit", "ISO 639-1:lt"],
      ["lu", "lub", "lub", "ISO 639-1:lu"],
      ["lv", "lav", "lav", "ISO 639-1:lv"],
      ["mg", "mlg", "mlg", "ISO 639-1:mg"],
      ["mh", "mah", "mah", "ISO 639-1:mh"],
      ["mi", "mri", "mao", "ISO 639-1:mi"],
      ["mk", "mkd", "mac", "ISO 639-1:mk"],
      ["ml", "mal", "mal", "ISO 639-1:ml"],
      ["mn", "mon", "mon", "ISO 639-1:mn"],
      ["mr", "mar", "mar", "ISO 639-1:mr"],
      ["ms", "msa", "may", "ISO 639-1:ms"],
      ["mt", "mlt", "mlt", "ISO 639-1:mt"],
      ["my", "mya", "bur", "ISO 639-1:my"],
      ["na", "nau", "nau", "ISO 639-1:na"],
      ["nb", "nob", "nob", "ISO 639-1:nb"],
      ["nd", "nde", "nde", "ISO 639-1:nd"],
      ["ne", "nep", "nep", "ISO 639-1:ne"],
      ["ng", "ndo", "ndo", "ISO 639-1:ng"],
      ["nl", "nld", "dut", "ISO 639-1:nl"],
      ["nn", "nno", "nno", "ISO 639-1:nn"],
      ["no", "nor", "nor", "ISO 639-1:no"],
      ["nr", "nbl", "nbl", "ISO 639-1:nr"],
      ["nv", "nav", "nav", "ISO 639-1:nv"],
      ["ny", "nya", "nya", "ISO 639-1:ny"],
      ["oc", "oci", "oci", "ISO 639-1:oc"],
      ["oj", "oji", "oji", "ISO 639-1:oj"],
      ["om", "orm", "orm", "ISO 639-1:om"],
      ["or", "ori", "ori", "ISO 639-1:or"],
      ["os", "oss", "oss", "ISO 639-1:os"],
      ["pa", "pan", "pan", "ISO 639-1:pa"],
      ["pi", "pli", "pli", "ISO 639-1:pi"],
      ["pl", "pol", "pol", "ISO 639-1:pl"],
      ["ps", "pus", "pus", "ISO 639-1:ps"],
      ["pt", "por", "por", "ISO 639-1:pt"],
      ["qu", "que", "que", "ISO 639-1:qu"],
      ["rm", "roh", "roh", "ISO 639-1:rm"],
      ["rn", "run", "run", "ISO 639-1:rn"],
      ["ro", "ron", "rum", "ISO 639-1:ro"],
      ["ru", "rus", "rus", "ISO 639-1:ru"],
      ["rw", "kin", "kin", "ISO 639-1:rw"],
      ["sa", "san", "san", "ISO 639-1:sa"],
      ["sc", "srd", "srd", "ISO 639-1:sc"],
      ["sd", "snd", "snd", "ISO 639-1:sd"],
      ["se", "sme", "sme", "ISO 639-1:se"],
      ["sg", "sag", "sag", "ISO 639-1:sg"],
      ["si", "sin", "sin", "ISO 639-1:si"],
      ["sk", "slk", "slo", "ISO 639-1:sk"],
      ["sl", "slv", "slv", "ISO 639-1:sl"],
      ["sm", "smo", "smo", "ISO 639-1:sm"],
      ["sn", "sna", "sna", "ISO 639-1:sn"],
      ["so", "som", "som", "ISO 639-1:so"],
      ["sq", "sqi", "alb", "ISO 639-1:sq"],
      ["sr", "srp", "srp", "ISO 639-1:sr"],
      ["ss", "ssw", "ssw", "ISO 639-1:ss"],
      ["st", "sot", "sot", "ISO 639-1:st"],
      ["su", "sun", "sun", "ISO 639-1:su"],
      ["sv", "swe", "swe", "ISO 639-1:sv"],
      ["sw", "swa", "swa", "ISO 639-1:sw"],
      ["ta", "tam", "tam", "ISO 639-1:ta"],
      ["te", "tel", "tel", "ISO 639-1:te"],
      ["tg", "tgk", "tgk", "ISO 639-1:tg"],
      ["th", "tha", "tha", "ISO 639-1:th"],
      ["ti", "tir", "tir", "ISO 639-1:ti"],
      ["tk", "tuk", "tuk", "ISO 639-1:tk"],
      ["tl", "tgl", "tgl", "ISO 639-1:tl"],
      ["tn", "tsn", "tsn", "ISO 639-1:tn"],
      ["to", "ton", "ton", "ISO 639-1:to"],
      ["tr", "tur", "tur", "ISO 639-1:tr"],
      ["ts", "tso", "tso", "ISO 639-1:ts"],
      ["tt", "tat", "tat", "ISO 639-1:tt"],
      ["tw", "twi", "twi", "ISO 639-1:tw"],
      ["ty", "tah", "tah", "ISO 639-1:ty"],
      ["ug", "uig", "uig", "ISO 639-1:ug"],
      ["uk", "ukr", "ukr", "ISO 639-1:uk"],
      ["ur", "urd", "urd", "ISO 639-1:ur"],
      ["uz", "uzb", "uzb", "ISO 639-1:uz"],
      ["ve", "ven", "ven", "ISO 639-1:ve"],
      ["vi", "vie", "vie", "ISO 639-1:vi"],
      ["vo", "vol", "vol", "ISO 639-1:vo"],
      ["wa", "wln", "wln", "ISO 639-1:wa"],
      ["wo", "wol", "wol", "ISO 639-1:wo"],
      ["xh", "xho", "xho", "ISO 639-1:xh"],
      ["yi", "yid", "yid", "ISO 639-1:yi"],
      ["yo", "yor", "yor", "ISO 639-1:yo"],
      ["za", "zha", "zha", "ISO 639-1:za"],
      ["zh", "zho", "chi", "ISO 639-1:zh"],
      ["zu", "zul", "zul", "ISO 639-1:zu"]
    ];
  }
});

// node_modules/@cospired/i18n-iso-languages/index.js
var require_i18n_iso_languages = __commonJS({
  "node_modules/@cospired/i18n-iso-languages/index.js"(exports) {
    var codes = require_codes();
    var registeredLocales = {};
    var alpha2 = {};
    var alpha3T = {};
    var alpha3B = {};
    var invertedAlpha3B = {};
    codes.forEach((codeInformation) => {
      const [first, second, third] = codeInformation;
      alpha2[first] = second;
      alpha3T[second] = first;
      alpha3B[third] = first;
      invertedAlpha3B[first] = third;
    });
    function registerLocale(localeData) {
      if (!localeData.locale) {
        throw new TypeError("Missing localeData.locale");
      }
      if (!localeData.languages) {
        throw new TypeError("Missing localeData.languages");
      }
      registeredLocales[localeData.locale] = localeData.languages;
    }
    function alpha3TToAlpha2(code) {
      return alpha3T[code];
    }
    function alpha3BToAlpha2(code) {
      return alpha3B[code];
    }
    function alpha2ToAlpha3T(code) {
      return alpha2[code];
    }
    function alpha2ToAlpha3B(code) {
      return invertedAlpha3B[code];
    }
    function toAlpha3T(code) {
      if (typeof code !== "string") {
        return void 0;
      }
      const codeLower = code.toLowerCase();
      if (code.length === 2) {
        return alpha2ToAlpha3T(codeLower);
      }
      if (code.length === 3) {
        if (alpha3T[codeLower]) {
          return codeLower;
        }
        if (alpha3BToAlpha2(codeLower)) {
          return alpha2ToAlpha3T(alpha3BToAlpha2(codeLower));
        }
      }
      return void 0;
    }
    function toAlpha3B(code) {
      if (typeof code !== "string") {
        return void 0;
      }
      const codeLower = code.toLowerCase();
      if (code.length === 2) {
        return alpha2ToAlpha3B(codeLower);
      }
      if (code.length === 3) {
        if (alpha3B[codeLower]) {
          return codeLower;
        }
        if (alpha3T[codeLower]) {
          return alpha2ToAlpha3B(alpha3TToAlpha2(codeLower));
        }
      }
      return void 0;
    }
    function toAlpha2(code) {
      if (typeof code !== "string") {
        return void 0;
      }
      const codeLower = code.toLowerCase();
      if (code.length === 2) {
        return codeLower;
      }
      if (code.length === 3) {
        if (alpha3B[codeLower]) {
          return alpha3BToAlpha2(codeLower);
        }
        if (alpha3T[codeLower]) {
          return alpha3TToAlpha2(codeLower);
        }
      }
      return void 0;
    }
    function getName(code, lang) {
      try {
        const d = registeredLocales[lang.toLowerCase()];
        return d[toAlpha2(code)];
      } catch (err) {
        return void 0;
      }
    }
    function getNames(lang) {
      const d = registeredLocales[lang.toLowerCase()];
      if (d === void 0) {
        return {};
      }
      return d;
    }
    function getAlpha2Code(name, lang) {
      try {
        let p;
        const codenames = registeredLocales[lang.toLowerCase()];
        for (p in codenames) {
          if (Object.prototype.hasOwnProperty.call(codenames, p)) {
            if (codenames[p].toLowerCase() === name.toLowerCase()) {
              return p;
            }
          }
        }
        return void 0;
      } catch (err) {
        return void 0;
      }
    }
    function getAlpha2Codes() {
      return alpha2;
    }
    function getAlpha3TCode(name, lang) {
      const code = getAlpha2Code(name, lang);
      if (code) {
        return toAlpha3T(code);
      }
      return void 0;
    }
    function getAlpha3BCode(name, lang) {
      const code = getAlpha2Code(name, lang);
      if (code) {
        return toAlpha3B(code);
      }
      return void 0;
    }
    function getAlpha3TCodes() {
      return alpha3T;
    }
    function getAlpha3BCodes() {
      return alpha3B;
    }
    function langs() {
      return Object.keys(registeredLocales);
    }
    function isValid(code) {
      return toAlpha3T(code) !== void 0;
    }
    exports.alpha2ToAlpha3B = alpha2ToAlpha3B;
    exports.alpha2ToAlpha3T = alpha2ToAlpha3T;
    exports.alpha3BToAlpha2 = alpha3BToAlpha2;
    exports.alpha3TToAlpha2 = alpha3TToAlpha2;
    exports.getAlpha2Code = getAlpha2Code;
    exports.getAlpha2Codes = getAlpha2Codes;
    exports.getAlpha3BCode = getAlpha3BCode;
    exports.getAlpha3BCodes = getAlpha3BCodes;
    exports.getAlpha3TCode = getAlpha3TCode;
    exports.getAlpha3TCodes = getAlpha3TCodes;
    exports.getName = getName;
    exports.getNames = getNames;
    exports.isValid = isValid;
    exports.langs = langs;
    exports.registerLocale = registerLocale;
    exports.toAlpha2 = toAlpha2;
    exports.toAlpha3B = toAlpha3B;
    exports.toAlpha3T = toAlpha3T;
  }
});

// src/main.ts
__export(exports, {
  default: () => TTSPlugin
});
var import_obsidian5 = __toModule(require("obsidian"));

// src/settings.ts
var import_obsidian3 = __toModule(require("obsidian"));

// src/TextInputPrompt.ts
var import_obsidian = __toModule(require("obsidian"));
var TextInputPrompt = class extends import_obsidian.Modal {
  constructor(app, promptText, hint, defaultValue, placeholder) {
    super(app);
    this.promptText = promptText;
    this.hint = hint;
    this.defaultValue = defaultValue;
    this.placeholder = placeholder;
  }
  onOpen() {
    this.titleEl.setText(this.promptText);
    this.createForm();
  }
  onClose() {
    this.contentEl.empty();
  }
  createForm() {
    const div = this.contentEl.createDiv();
    const text = new import_obsidian.Setting(div).setName(this.promptText).setDesc(this.hint).addText((textComponent) => {
      textComponent.setValue(this.defaultValue).setPlaceholder(this.placeholder).inputEl.setAttribute("size", "50");
      this.textComponent = textComponent;
    });
    text.controlEl.addClass("tts-text-input");
    new import_obsidian.Setting(div).addButton((b) => {
      b.setButtonText("Play").onClick(() => __async(this, null, function* () {
        this.resolve(this.textComponent);
      }));
      return b;
    });
  }
  openAndGetValue(resolve) {
    return __async(this, null, function* () {
      this.resolve = resolve;
      yield this.open();
    });
  }
};

// src/LanguageVoiceModal.ts
var import_obsidian2 = __toModule(require("obsidian"));
var import_i18n_iso_languages = __toModule(require_i18n_iso_languages());
var LanguageVoiceModal = class extends import_obsidian2.Modal {
  constructor(plugin, map) {
    super(plugin.app);
    this.plugin = plugin;
    if (map) {
      this.language = map.language;
      this.voice = map.voice;
    }
  }
  display() {
    return __async(this, null, function* () {
      const { contentEl } = this;
      contentEl.empty();
      const languageNames = new Intl.DisplayNames(["en"], { type: "language" });
      new import_obsidian2.Setting(contentEl).setName("Language").addDropdown((dropdown) => __async(this, null, function* () {
        for (const languageCodeKey in import_i18n_iso_languages.default.getAlpha2Codes()) {
          const displayNames = new Intl.DisplayNames([languageCodeKey], { type: "language", fallback: "none" });
          if (displayNames) {
            const name = displayNames.of(languageCodeKey);
            if (name) {
              dropdown.addOption(languageCodeKey, name);
            }
          }
        }
        dropdown.setValue(this.language).onChange((value) => {
          this.language = value;
        });
      }));
      new import_obsidian2.Setting(contentEl).setName("Voice").addDropdown((dropdown) => __async(this, null, function* () {
        const voices = window.speechSynthesis.getVoices();
        for (const voice of voices) {
          dropdown.addOption(voice.name, voice.name + " - " + languageNames.of(voice.lang));
        }
        dropdown.setValue(this.voice).onChange((value) => __async(this, null, function* () {
          this.voice = value;
        }));
      })).addExtraButton((button) => {
        button.setIcon("play-audio-glyph").setTooltip("Test voice").onClick(() => __async(this, null, function* () {
          const input = new TextInputPrompt(this.app, "What do you want to hear?", "", "Hello world this is Text to speech running in obsidian", "Hello world this is Text to speech running in obsidian");
          yield input.openAndGetValue((value) => __async(this, null, function* () {
            if (value.getValue().length === 0)
              return;
            yield this.plugin.ttsService.sayWithVoice("", value.getValue(), this.voice);
          }));
        }));
      });
      const footerEl = contentEl.createDiv();
      const footerButtons = new import_obsidian2.Setting(footerEl);
      footerButtons.addButton((b) => {
        b.setTooltip("Save").setIcon("checkmark").onClick(() => __async(this, null, function* () {
          this.saved = true;
          this.close();
        }));
        return b;
      });
      footerButtons.addExtraButton((b) => {
        b.setIcon("cross").setTooltip("Cancel").onClick(() => {
          this.saved = false;
          this.close();
        });
        return b;
      });
    });
  }
  onOpen() {
    return __async(this, null, function* () {
      yield this.display();
    });
  }
};

// src/settings.ts
var DEFAULT_SETTINGS = {
  defaultVoice: "",
  pitch: 1,
  rate: 1,
  volume: 1,
  speakLinks: false,
  speakFrontmatter: false,
  speakSyntax: false,
  speakTitle: true,
  speakCodeblocks: false,
  speakEmoji: false,
  languageVoices: [],
  stopPlaybackWhenNoteChanges: false
};
var TTSSettingsTab = class extends import_obsidian3.PluginSettingTab {
  constructor(plugin) {
    super(plugin.app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Text to Speech - Settings" });
    new import_obsidian3.Setting(containerEl).setName("Default voice").addDropdown((dropdown) => __async(this, null, function* () {
      const voices = window.speechSynthesis.getVoices();
      for (const voice of voices) {
        dropdown.addOption(voice.name, voice.name);
      }
      dropdown.setValue(this.plugin.settings.defaultVoice).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.defaultVoice = value;
        yield this.plugin.saveSettings();
      }));
    })).addExtraButton((button) => {
      button.setIcon("play-audio-glyph").setTooltip("Test voice").onClick(() => __async(this, null, function* () {
        const input = new TextInputPrompt(this.app, "What do you want to hear?", "", "Hello world this is Text to speech running in obsidian", "Hello world this is Text to speech running in obsidian");
        yield input.openAndGetValue((value) => __async(this, null, function* () {
          if (value.getValue().length === 0)
            return;
          yield this.plugin.ttsService.say("", value.getValue());
        }));
      }));
    });
    containerEl.createEl("h3", { text: "Language specific voices" });
    new import_obsidian3.Setting(containerEl).setName("Add New").setDesc("Add a new language specific voice").addButton((button) => {
      return button.setTooltip("add new language specific voice").setIcon("create-new").onClick(() => __async(this, null, function* () {
        const modal = new LanguageVoiceModal(this.plugin);
        modal.onClose = () => __async(this, null, function* () {
          if (modal.saved) {
            this.plugin.settings.languageVoices.push({
              language: modal.language,
              voice: modal.voice
            });
            yield this.plugin.saveSettings();
            this.display();
          }
        });
        modal.open();
      }));
    });
    const additionalContainer = containerEl.createDiv("tts-languages");
    const voicesDiv = additionalContainer.createDiv("voices");
    for (const languageVoice of this.plugin.settings.languageVoices) {
      const displayNames = new Intl.DisplayNames([languageVoice.language], { type: "language", fallback: "none" });
      const setting = new import_obsidian3.Setting(voicesDiv);
      setting.setName(displayNames.of(languageVoice.language) + " -  " + languageVoice.language);
      setting.setDesc(languageVoice.voice);
      setting.addExtraButton((b) => {
        b.setIcon("pencil").setTooltip("Edit").onClick(() => {
          const modal = new LanguageVoiceModal(this.plugin, languageVoice);
          modal.onClose = () => __async(this, null, function* () {
            if (modal.saved) {
              const setting2 = this.plugin.settings.languageVoices.filter((value) => value.language !== modal.language);
              setting2.push({ language: modal.language, voice: modal.voice });
              this.plugin.settings.languageVoices = setting2;
              yield this.plugin.saveSettings();
              this.display();
            }
          });
          modal.open();
        });
      }).addExtraButton((b) => {
        b.setIcon("trash").setTooltip("Delete").onClick(() => __async(this, null, function* () {
          this.plugin.settings.languageVoices = this.plugin.settings.languageVoices.filter((value) => value.language !== languageVoice.language);
          yield this.plugin.saveSettings();
          this.display();
        }));
      });
    }
    containerEl.createEl("h3", { text: "Audio settings" });
    new import_obsidian3.Setting(containerEl).setName("Volume").addSlider((slider) => __async(this, null, function* () {
      slider.setValue(this.plugin.settings.volume * 100).setDynamicTooltip().setLimits(0, 100, 1).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.volume = value / 100;
        yield this.plugin.saveSettings();
      }));
    })).addExtraButton((button) => {
      button.setIcon("reset").setTooltip("restore default").onClick(() => __async(this, null, function* () {
        this.plugin.settings.volume = DEFAULT_SETTINGS.volume;
        yield this.plugin.saveSettings();
        this.display();
      }));
    });
    new import_obsidian3.Setting(containerEl).setName("Rate").setDesc("how fast the text will be spoken").addSlider((slider) => __async(this, null, function* () {
      slider.setValue(this.plugin.settings.rate).setDynamicTooltip().setLimits(0.1, 10, 0.1).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.rate = value;
        yield this.plugin.saveSettings();
      }));
    })).addExtraButton((button) => {
      button.setIcon("reset").setTooltip("restore default").onClick(() => __async(this, null, function* () {
        this.plugin.settings.rate = DEFAULT_SETTINGS.rate;
        yield this.plugin.saveSettings();
        this.display();
      }));
    });
    new import_obsidian3.Setting(containerEl).setName("Pitch").addSlider((slider) => __async(this, null, function* () {
      slider.setValue(this.plugin.settings.pitch).setDynamicTooltip().setLimits(0, 2, 0.1).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.pitch = value;
        yield this.plugin.saveSettings();
      }));
    })).addExtraButton((button) => {
      button.setIcon("reset").setTooltip("restore default").onClick(() => __async(this, null, function* () {
        this.plugin.settings.pitch = DEFAULT_SETTINGS.pitch;
        yield this.plugin.saveSettings();
        this.display();
      }));
    });
    containerEl.createEl("h3", { text: "Speak" });
    new import_obsidian3.Setting(containerEl).setName("Title").addToggle((toggle) => __async(this, null, function* () {
      toggle.setValue(this.plugin.settings.speakTitle).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.speakTitle = value;
        yield this.plugin.saveSettings();
      }));
    }));
    new import_obsidian3.Setting(containerEl).setName("Frontmatter").addToggle((toggle) => __async(this, null, function* () {
      toggle.setValue(this.plugin.settings.speakFrontmatter).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.speakFrontmatter = value;
        yield this.plugin.saveSettings();
      }));
    }));
    new import_obsidian3.Setting(containerEl).setName("Links").addToggle((toggle) => __async(this, null, function* () {
      toggle.setValue(this.plugin.settings.speakLinks).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.speakLinks = value;
        yield this.plugin.saveSettings();
      }));
    }));
    new import_obsidian3.Setting(containerEl).setName("Codeblocks").addToggle((toggle) => __async(this, null, function* () {
      toggle.setValue(this.plugin.settings.speakCodeblocks).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.speakCodeblocks = value;
        yield this.plugin.saveSettings();
      }));
    }));
    new import_obsidian3.Setting(containerEl).setName("Syntax").addToggle((toggle) => __async(this, null, function* () {
      toggle.setValue(this.plugin.settings.speakSyntax).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.speakSyntax = value;
        yield this.plugin.saveSettings();
      }));
    }));
    new import_obsidian3.Setting(containerEl).setName("Emoji").addToggle((toggle) => __async(this, null, function* () {
      toggle.setValue(this.plugin.settings.speakEmoji).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.speakEmoji = value;
        yield this.plugin.saveSettings();
      }));
    }));
    containerEl.createEl("h2", { text: "Misc" });
    new import_obsidian3.Setting(containerEl).setName("Stop playback when a note is closed/new note is opened").addToggle((toggle) => __async(this, null, function* () {
      toggle.setValue(this.plugin.settings.stopPlaybackWhenNoteChanges).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.stopPlaybackWhenNoteChanges = value;
        yield this.plugin.saveSettings();
      }));
    }));
  }
};

// src/TTSService.ts
var import_obsidian4 = __toModule(require("obsidian"));
var TTSService = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  stop() {
    if (!this.isSpeaking())
      return;
    window.speechSynthesis.cancel();
  }
  pause() {
    if (!this.isSpeaking())
      return;
    window.speechSynthesis.pause();
  }
  resume() {
    if (!this.isSpeaking())
      return;
    window.speechSynthesis.resume();
  }
  isSpeaking() {
    return window.speechSynthesis.speaking;
  }
  isPaused() {
    return window.speechSynthesis.paused;
  }
  sayWithVoice(title, text, voice) {
    return __async(this, null, function* () {
      let content = text;
      if (!this.plugin.settings.speakSyntax) {
        content = content.replace(/#/g, "");
        content = content.replace(/-/g, "");
        content = content.replace(/_/g, "");
        content = content.replace(/\*/g, "");
        content = content.replace(/\^/g, "");
        content = content.replace(/==/g, "");
        content = content.replace(/^\S{6}/g, "");
      }
      if (!this.plugin.settings.speakLinks) {
        content = content.replace(/(?:__|[*#])|\[(.*?)]\(.*?\)/gm, "$1");
      }
      if (!this.plugin.settings.speakCodeblocks) {
        content = content.replace(/```[\s\S]*?```/g, "");
      }
      if (this.plugin.settings.speakTitle && (title == null ? void 0 : title.length) > 0) {
        content = title + " ! ! " + content;
      }
      if (!this.plugin.settings.speakEmoji) {
        content = content.replace(/(\u00a9|\u00ae|[\u2000-\u3300]|\ud83c[\ud000-\udfff]|\ud83d[\ud000-\udfff]|\ud83e[\ud000-\udfff])/g, "");
      }
      content = content.replace(/\n/g, " ! ");
      content = content.replace(/\[\[(.*\|)(.*)]]/gm, "$2");
      const msg = new SpeechSynthesisUtterance();
      msg.text = content;
      msg.volume = this.plugin.settings.volume;
      msg.rate = this.plugin.settings.rate;
      msg.pitch = this.plugin.settings.pitch;
      msg.voice = window.speechSynthesis.getVoices().filter((otherVoice) => otherVoice.name === voice)[0];
      window.speechSynthesis.speak(msg);
      this.plugin.statusbar.setText("TTS: speaking");
    });
  }
  getVoice(languageCode) {
    const filtered = this.plugin.settings.languageVoices.filter((lang) => lang.language === languageCode);
    if (filtered.length === 0)
      return null;
    return filtered[0].voice;
  }
  say(title, text, languageCode) {
    return __async(this, null, function* () {
      let usedVoice = this.plugin.settings.defaultVoice;
      if (languageCode && languageCode.length !== 0) {
        const voice = this.getVoice(languageCode);
        if (voice) {
          usedVoice = voice;
        } else {
          new import_obsidian4.Notice("TTS: could not find voice for language " + languageCode + ". Using default voice.");
        }
      }
      yield this.sayWithVoice(title, text, usedVoice);
    });
  }
  play(view) {
    return __async(this, null, function* () {
      let selectedText = view.editor.getSelection().length > 0 ? view.editor.getSelection() : window.getSelection().toString();
      let content = selectedText.length > 0 ? selectedText : view.getViewData();
      let title = selectedText.length > 0 ? null : view.getDisplayText();
      const language = this.getLanguageFromFrontmatter(view);
      if (!this.plugin.settings.speakFrontmatter) {
        if (content.startsWith("---")) {
          content = content.replace("---", "");
          content = content.substring(content.indexOf("---") + 1);
        }
      }
      yield this.say(title, content, language);
    });
  }
  getLanguageFromFrontmatter(view) {
    let language = "";
    if (!view.getViewData().startsWith("---"))
      return language;
    const frontmatter = view.getViewData().match(/---[\s\S]*?---/);
    if (frontmatter && frontmatter[0]) {
      const parsedFrontmatter = (0, import_obsidian4.parseYaml)(frontmatter[0].replace(/---/g, ""));
      if (parsedFrontmatter["lang"]) {
        language = parsedFrontmatter["lang"];
      }
    }
    return language;
  }
};

// src/main.ts
var TTSPlugin = class extends import_obsidian5.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.ttsService = new TTSService(this);
      console.log("loading tts plugin");
      if (import_obsidian5.Platform.isAndroidApp) {
        new import_obsidian5.Notice("TTS: due to a bug in android this plugin does not work on this platform");
        this.unload();
      }
      yield this.loadSettings();
      this.addCommand({
        id: "start-tts-playback",
        name: "Start playback",
        checkCallback: (checking) => {
          const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
          if (!checking && markdownView)
            this.ttsService.play(markdownView);
          return !!markdownView;
        }
      });
      this.addCommand({
        id: "cancel-tts-playback",
        name: "Stop playback",
        checkCallback: (checking) => {
          if (!checking)
            this.ttsService.stop();
          return this.ttsService.isSpeaking();
        }
      });
      this.addCommand({
        id: "pause-tts-playback",
        name: "pause playback",
        checkCallback: (checking) => {
          if (!checking)
            this.ttsService.pause();
          return this.ttsService.isSpeaking();
        }
      });
      this.addCommand({
        id: "resume-tts-playback",
        name: "Resume playback",
        checkCallback: (checking) => {
          if (!checking)
            this.ttsService.resume();
          return this.ttsService.isPaused();
        }
      });
      this.registerInterval(window.setInterval(() => {
        if (!this.ttsService.isSpeaking()) {
          this.statusbar.setText("TTS");
        }
      }, 1e3 * 10));
      this.addRibbonIcon("audio-file", "Text to Speech", (event) => __async(this, null, function* () {
        yield this.createMenu(event);
      }));
      this.registerEvent(this.app.workspace.on("editor-menu", (menu, editor, markdownView) => {
        menu.addItem((item) => {
          item.setTitle(window.getSelection().toString().length > 0 ? "Read selected text" : "Read the note").setIcon("audio-file").onClick(() => {
            this.ttsService.play(markdownView);
          });
        });
      }));
      this.registerEvent(this.app.workspace.on("layout-change", () => {
        if (this.settings.stopPlaybackWhenNoteChanges) {
          this.ttsService.stop();
        }
      }));
      this.addSettingTab(new TTSSettingsTab(this));
      this.statusbar = this.addStatusBarItem();
      this.statusbar.setText("TTS");
      this.statusbar.classList.add("mod-clickable");
      this.statusbar.setAttribute("aria-label", "Text to Speech");
      this.statusbar.setAttribute("aria-label-position", "top");
      this.statusbar.onClickEvent((event) => __async(this, null, function* () {
        yield this.createMenu(event);
      }));
    });
  }
  createMenu(event) {
    return __async(this, null, function* () {
      const menu = new import_obsidian5.Menu(this.app);
      const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
      if (markdownView) {
        if (window.speechSynthesis.speaking) {
          menu.addItem((item) => {
            item.setIcon("play-audio-glyph").setTitle("Add to playback queue").onClick(() => __async(this, null, function* () {
              yield this.ttsService.play(markdownView);
            }));
          });
        } else {
          yield this.ttsService.play(markdownView);
          return;
        }
      }
      if (window.speechSynthesis.speaking) {
        menu.addItem((item) => {
          item.setIcon("stop-audio-glyph").setTitle("Stop").onClick(() => __async(this, null, function* () {
            this.ttsService.stop();
          }));
        });
        if (window.speechSynthesis.paused) {
          menu.addItem((item) => {
            item.setIcon("play-audio-glyph").setTitle("Resume").onClick(() => __async(this, null, function* () {
              this.ttsService.resume();
            }));
          });
        } else {
          menu.addItem((item) => {
            item.setIcon("paused").setTitle("Pause").onClick(() => __async(this, null, function* () {
              this.ttsService.pause();
            }));
          });
        }
      }
      menu.showAtPosition({ x: event.x, y: event.y });
    });
  }
  onunload() {
    return __async(this, null, function* () {
      console.log("unloading tts plugin");
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
